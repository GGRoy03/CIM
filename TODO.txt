TASK:
x) Styling API <---------
x) Layout (Store components as a N..Many tree)
x) Overall clean-ups (Code is very ugly in some parts)
x) Think about how we actually want to allocate our memory
x) Replace STD functions

TASK DESC:
-Styling API:
    Find a decent format
    Implement a simple parser | setter
    Hot reload user styles
    Biggest problem is that we don't know where to store that information.(Primitive?)

BUGS:
-VSync causes a lot of problems with the inputs. For example, when dragging the
|graphics can run {-NumOfBackBuffers} frames behind the mouse causing a weird thing
|where the object being dragged doesn't feel good. Disabling V-Sync fixes all of this,
|but it's not a good solution to force on the user.

THOUGHTS:
For the .cim parser we want a clear distinction between the tokenizer and the
transformative part.

Lexer : Read the text character and output the tokens.
Tokens: One step up from characters. Tells the parser what it is and what data it holds

Token Structure:
{
    Type
    WhereInTheInputBuffer --> ? For error messages

    union
    {
        String
        Integer
        Float32
        Float64
    } Values

    // Other
}

Tokens are separated by types. Not clear if we act on them? Read entire file upfront.
